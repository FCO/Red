use v6;
use Test;
use lib 'lib';

plan 8;

# Test the native :ver<> syntax support for versioned models
use Red::ModelRegistry;
use Red;

# Test with native :ver<> syntax (no trait needed)
{
    # Simulate models that would be in separate files
    model TestUser:ver<1.0> {
        has Int $.id is serial;
        has Str $.name is column;
    }
    
    model TestUser:ver<2.0> {
        has Int $.id is serial;
        has Str $.name is column;
        has Str $.email is column;
    }
    
    # Models need to be manually registered since no trait is used
    register-model-version('TestUser', '1.0', TestUser:ver<1.0>);
    register-model-version('TestUser', '2.0', TestUser:ver<2.0>);
    
    # Test that models are registered correctly
    my $v1 = get-model-version('TestUser', '1.0');
    my $v2 = get-model-version('TestUser', '2.0');
    
    ok $v1.defined, 'TestUser v1.0 is registered';
    ok $v2.defined, 'TestUser v2.0 is registered';
    
    is $v1.^name, 'TestUser:ver<1.0>', 'v1.0 has correct name';
    is $v2.^name, 'TestUser:ver<2.0>', 'v2.0 has correct name';
}

# Test listing model versions
{
    my %versions = list-model-versions('TestUser');
    ok %versions.defined, 'Can list TestUser versions';
    ok %versions<1.0>.defined, 'TestUser v1.0 is in version list';
    ok %versions<2.0>.defined, 'TestUser v2.0 is in version list';
}

# Test getting latest version
{
    my $latest = get-latest-model-version('TestUser');
    ok $latest.defined, 'Can get latest TestUser version';
    is $latest.^name, 'TestUser:ver<2.0>', 'Latest version is v2.0';
}

done-testing;